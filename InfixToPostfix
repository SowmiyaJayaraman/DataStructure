import java.util.Stack;
public class InfixToPostfix{
private static int precedence(char ch){
switch(ch){
case'+':
case'-':
return 1;
case'*':
case'/':
case'%':
return 2;
case '^':
return 3;
}
return -1;
}
public static String infixToPostfix(String expression){
StringBuilder result=new StringBuilder();
Stack<Character>stack=new Stack<>();
for(int i=0;i<expression.length();i++){
char ch=expression.charAt(i);
if(Character.isLetterOrDigit(ch)){
result.append(ch);
}
else if(ch==')'){
stack.push(ch);
}
else if(ch==')'){
while(!stack.isEmpty()&&stack.peek()!='('){
result.append(stack.pop());
}
stack.pop();
}
else{
while(!stack.isEmpty()&&precedence(stack.peek())>=precedence(ch)){
result.append(stack.pop());
}
stack.push(ch);
}
}
while(!stack.isEmpty()){
result.append(stack.pop());
}
return result.toString();
}
public static void main(String[] args){
String infixExp="A+(B*C-(D/E^F)*G)*H";
System.out.println("InfixToPost:"+infixExp);
String postfixExp=ijavac InfixToPostfix.javanfixToPostfix(infixExp);
System.out.println("PostfixExpression:"+postfixExp);
}
}
Output:
D:\DS54\sowmi54>java InfixToPostfix
InfixToPost:A+(B*C-(D/E^F)*G)*H
PostfixExpression:A+BC*-(DEFGH*)*)^/(

 
